# 假设你正在爬楼梯。需要 n阶你才能到达楼顶。
#
# 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
#
# 注意：给定 n 是一个正整数。
#
# 示例 1：
# 输入： 2
# 输出： 2
# 解释： 有两种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶
# 2.  2 阶

# 示例 2：
# 输入： 3
# 输出： 3
# 解释： 有三种方法可以爬到楼顶。
# 1.  1 阶 + 1 阶 + 1 阶
# 2.  1 阶 + 2 阶
# 3.  2 阶 + 1 阶

# 我们用f(n)来表示 走到第n个楼梯的走法，所以就有了f(10) = f(9) + f(8)
# 然后f(9) = f(8) + f(7), f(8) = f(7) + f(6)......
# 这样我们就得出来一个递归式：
# f(n) = f(n-1) + f(n-2);
# 还有两个初始状态：
# f(1) = 1;
# f(2) = 2;


class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n<=3:
            return n
        result=[1,2,3]
        for i in range(3,n):
            result.append(result[i-1]+result[i-2])
        return result[-1]


